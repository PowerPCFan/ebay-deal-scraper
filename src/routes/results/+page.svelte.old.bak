<script lang="ts">
    import Titles from "$lib/components/titles.svelte";
    import type { PageData, SearchResult } from '$lib/types.ts';
    import { onMount } from 'svelte';
    import { goto } from '$app/navigation';
    import Tooltip from "$lib/components/tooltip.svelte";

    export let data: PageData;

    let allResults: SearchResult[] = data?.results || [];
    let browserIsFirefox: boolean = false; // Declare outside, initialize to a default value
    let currentPage: number = 1; // Declare outside, initialize to a default value
    let currentPageIsOne: boolean = false;
    let back: () => void;
    let forward: () => void;

    let width: number;

    let url: URL; // value defined in onMount
    let baseUrl: string; // value defined in onMount

    let searchQuery: string; // value defined in onMount
    let exclusions: string; // value defined in onMount
    let filterAuction: boolean; // value defined in onMount
    let filterBuyItNow: boolean; // value defined in onMount
    let sortBy: string; // this sort thing is confusing the variables are messed up!!!
    let minPrice: string; // value defined in onMount
    let maxPrice: string; // value defined in onMount
    let condition: string; // value defined in onMount

    function updateURLParam(url: string, paramName: string, paramValue: string): string {
        const urlObj = new URL(url);
        urlObj.searchParams.set(paramName, paramValue);
        return urlObj.toString();
    }

    function handleSubmit() {
        window.location.href = updateURLParam(url.toString(), "search", searchQuery);
    }

    function handleSubmitEnter(kbdevent: KeyboardEvent) {
        if (kbdevent.key === "Enter") {
            handleSubmit()
        }
    }

    onMount(() => {
        // CURRENT URL
        url = new URL(window.location.href);
        baseUrl = url.origin

        // Setting up ACTUAL variable values so the different filters are set to their proper values
        searchQuery = url.searchParams.get('search') || '';
        exclusions = url.searchParams.get('exclude') || '';
        
        let filter = url.searchParams.get('filter') || '';
        if (filter === 'buy-it-now') {
            (document.getElementById('buyitnow-checkbox') as HTMLInputElement).checked = true;
            (document.getElementById('auction-checkbox') as HTMLInputElement).checked = false;
            filterAuction = false;
            filterBuyItNow = true;
        } else if (filter === 'auction') {
            (document.getElementById('auction-checkbox') as HTMLInputElement).checked = true;
            (document.getElementById('buyitnow-checkbox') as HTMLInputElement).checked = false;
            filterAuction = true;
            filterBuyItNow = false;
        } else {
            (document.getElementById('buyitnow-checkbox') as HTMLInputElement).checked = true;
            (document.getElementById('auction-checkbox') as HTMLInputElement).checked = true;
            filterAuction = true;
            filterBuyItNow = true;
        }

        let sort = url.searchParams.get('sort') || 'best-match';
        if (sort === 'price') { sortBy = "price" } 
        else if (sort === '-price') { sortBy = "-price" } 
        else if (sort === 'newly-listed') { sortBy = "newly-listed" } 
        else if (sort === 'end-time') { sortBy = "end-time" }
        else { sortBy = "best-match" }

        minPrice = url.searchParams.get('minPrice') || '';
        maxPrice = url.searchParams.get('maxPrice') || '';

        condition = url.searchParams.get('condition') || '';
        if (condition.includes("1000")) {(document.querySelector('[data-id="1000"]') as HTMLInputElement).checked = true}
        if (condition.includes("1500")) {(document.querySelector('[data-id="1500"]') as HTMLInputElement).checked = true}
        if (condition.includes("1750")) {(document.querySelector('[data-id="1750"]') as HTMLInputElement).checked = true}
        if (condition.includes("2000")) {(document.querySelector('[data-id="2000"]') as HTMLInputElement).checked = true}
        if (condition.includes("2010")) {(document.querySelector('[data-id="2010"]') as HTMLInputElement).checked = true}
        if (condition.includes("2020")) {(document.querySelector('[data-id="2020"]') as HTMLInputElement).checked = true}
        if (condition.includes("2030")) {(document.querySelector('[data-id="2030"]') as HTMLInputElement).checked = true}
        if (condition.includes("2500")) {(document.querySelector('[data-id="2500"]') as HTMLInputElement).checked = true}
        if (condition.includes("2750")) {(document.querySelector('[data-id="2750"]') as HTMLInputElement).checked = true}
        if (condition.includes("2990") || condition.includes("3000")) {(document.querySelector('[data-id="2990|3000"]') as HTMLInputElement).checked = true}
        if (condition.includes("3010") || condition.includes("4000")) {(document.querySelector('[data-id="3010|4000"]') as HTMLInputElement).checked = true}
        if (condition.includes("5000")) {(document.querySelector('[data-id="5000"]') as HTMLInputElement).checked = true}
        if (condition.includes("6000")) {(document.querySelector('[data-id="6000"]') as HTMLInputElement).checked = true}
        if (condition.includes("7000")) {(document.querySelector('[data-id="7000"]') as HTMLInputElement).checked = true}

        // Checkboxes
        function updateMainCheckboxState(mainCheckbox: HTMLInputElement, subCheckboxes: NodeListOf<HTMLInputElement>) {
            const checkedCount = Array.from(subCheckboxes).filter(checkbox => checkbox.checked).length; 
            if (checkedCount === subCheckboxes.length) {
                mainCheckbox.checked = true;
                mainCheckbox.indeterminate = false;
            } else if (checkedCount === 0) {
                mainCheckbox.checked = false;
                mainCheckbox.indeterminate = false;
            } else {
                mainCheckbox.checked = false;
                mainCheckbox.indeterminate = true;
            }
        }

        function setupCheckboxSync(mainId: string, subClass: string) {
            const mainCheckbox = document.getElementById(mainId) as HTMLInputElement;
            const subCheckboxes = document.querySelectorAll<HTMLInputElement>(subClass);

            if (!mainCheckbox) return;

            mainCheckbox.addEventListener('change', () => {
                subCheckboxes.forEach(checkbox => {
                checkbox.checked = mainCheckbox.checked;
                });
            });

            subCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', () => updateMainCheckboxState(mainCheckbox, subCheckboxes));
            });
        }

        setupCheckboxSync('new-condition', '.other-new-condition');
        setupCheckboxSync('refurbished-condition', '.other-refurbished-condition');
        setupCheckboxSync('used-condition', '.other-used-condition');

        allResults = data?.results || [];
        browserIsFirefox = navigator.userAgent.toLowerCase().includes("firefox");

        // Variable for current page
        currentPage = parseInt(url.searchParams.get("page") || "1", 10);
        if (currentPage === 1) currentPageIsOne = true

        back = () => {
            // const url = new URL(window.location.href); // Declare url inside back
            url.searchParams.set("page", Math.max(1, currentPage - 1).toString());
            goto(url.toString());
        };

        forward = () => {
            // const url = new URL(window.location.href); // Declare url inside forward
            url.searchParams.set("page", (currentPage + 1).toString());
            goto(url.toString());
        };

        // Checkbox Accordions
        const carets = document.getElementsByClassName("condition-accordion-caret");
        let index;
        for (index = 0; index < carets.length; index++) {
            carets[index].addEventListener("click", function(this: HTMLElement) {
                // const panel = this.nextElementSibling as HTMLElement;
                let panel = this.nextElementSibling as HTMLElement | null;
                while (panel && !panel.classList.contains("panel")) {
                    panel = panel.nextElementSibling as HTMLElement | null;
                }

                if (panel && panel.style.display === "block") {
                    panel.style.display = "none";
                    this.style.transform = "rotate(0deg)"
                } else {
                    panel.style.display = "block";
                    this.style.transform = "rotate(180deg)"
                }
            });
        }
    });
</script>

<svelte:window bind:innerWidth={width} />

<style lang="scss">
    @import "/static/styles/style.scss";
</style>

<main id="sveltekit-body">
    <div id="searchresults-title-grid">
        <a href={baseUrl} class="inline-block" aria-label="Go to home page">
            <div class="fa-solid fa-house-chimney inline-block" aria-label="Go to home page"></div>
        </a>
        {#if width >= 888}
        <Titles large style="margin-top: -15px; margin-bottom: 15px;">Search Results</Titles>
        {:else}
        <Titles custom-58px style="margin-top: -15px; margin-bottom: 15px;">Search Results</Titles>
        {/if}
    
        <div class="search-row">
            <input
                id="search"
                placeholder="Enter search query..."
                bind:value={searchQuery}
                on:keydown={handleSubmitEnter}
                on:input={() => console.log('📝 [Client] Debug: Search query updated:', searchQuery)} />
                <button type="submit" class="searchbutton" on:click={handleSubmit}>Search</button>
        </div>
    </div>
        <div id="main-flexbox">
            <div id="sidebar">
                <h1>Filters</h1>
                <label class="block"><Tooltip fontsize="1rem" questionmark title="Exclude Words" text="Word exclusion lets you filter out results containing a certain word. <br><br>For instance, if you are searching for something and you don't want results that contain the word &quot;box&quot;, you can type the word &quot;box&quot; into the Exclude Words box to remove all results containing the word box. <br><br>You can enter one word or multiple words. <br><br><strong>NOTE:</strong> This feature will only work properly if you separate words using commas. For example: <code>box, backplate, not working, for parts</code>">Exclude Words</Tooltip></label>
                    <input class="block" type="text" id="exclusions" bind:value={exclusions} on:input={() => console.log('📝 [Client] Debug: Search Exclusions updated:', exclusions)} placeholder="Enter words to exclude...">
                    <br>
                    <label for="listing-type">Listing Type:</label>
                    <div id="listing-type">
                        <label>
                            <input id="auction-checkbox" class="listingtypecheckboxes" type="checkbox" bind:checked={filterAuction}>
                            Auction
                        </label>
                        <br>
                        <label>
                            <input id="buyitnow-checkbox" class="listingtypecheckboxes" type="checkbox" bind:checked={filterBuyItNow}>
                            Buy It Now
                        </label>
                    </div>
                    
                    <label class="block" for="sort" style="margin-top: 15px !important;">Sort By:</label>
                    <select class="block" id="sort" bind:value={sortBy} on:change={() => console.log('📊 [Client] Debug: Sort changed to:', sortBy)}>
                        <option value="best-match">Best Match</option>
                        <option value="price">Price + Shipping (lowest to highest)</option>
                        <option value="-price">Price + Shipping (highest to lowest)</option>
                        <option value="newly-listed">List Time (new to old)</option>
                        {#if filterAuction && !filterBuyItNow}
                            <option value="end-time">Auction End Time</option>
                        {/if}
                    </select>
            
                    <label class="block" for="minPrice" style="margin-top: 15px !important;">Min Price:</label>
                    <input class="block" type="number" id="minPrice" bind:value={minPrice} placeholder="Enter min price">
            
                    <label class="block" for="maxPrice" style="margin-top: 15px !important;">Max Price:</label>
                    <input class="block" type="number" id="maxPrice" bind:value={maxPrice} placeholder="Enter max price">

                    <br>
                    <label for="condition-boxes">Item Conditions:</label>
                    <div id="condition-boxes">

                    <label> <!-- "New" checkbox - Category -->
                        <input type="checkbox" id="new-condition" class="condition-box" data-id="1000">
                        New&nbsp;&nbsp;
                    </label><div class="fa-solid fa-caret-down condition-accordion-caret inline-block"></div>
                    <br>
                    <div class="panel">
                        <label>
                            <input type="checkbox" class="condition-box indented-condition-box other-new-condition" data-id="1500">
                            Open Box
                        </label>
                        <br>
                        <label>
                            <input type="checkbox" class="condition-box indented-condition-box other-new-condition" data-id="1750">
                            New (with defects)
                        </label>
                        <br>
                    </div>

                    <label> <!-- "Refurbished" checkbox - Category -->
                        <input type="checkbox" id="refurbished-condition" class="condition-box" data-id="">
                        Refurbished&nbsp;&nbsp;
                    </label><div class="fa-solid fa-caret-down condition-accordion-caret inline-block"></div>
                    <br>
                    <div class="panel">
                        <label>
                            <input type="checkbox" class="condition-box indented-condition-box other-refurbished-condition" data-id="2000">
                            Certified Refurbished
                        </label>
                        <br>                    
                        <label>
                            <input type="checkbox" class="condition-box indented-condition-box other-refurbished-condition" data-id="2010">
                            Excellent - Refurbished
                        </label>
                        <br>                    
                        <label>
                            <input type="checkbox" class="condition-box indented-condition-box other-refurbished-condition" data-id="2020">
                            Very Good - Refurbished
                        </label>
                        <br>                    
                        <label>
                            <input type="checkbox" class="condition-box indented-condition-box other-refurbished-condition" data-id="2030">
                            Good - Refurbished
                        </label>
                        <br>                    
                        <label>
                            <input type="checkbox" class="condition-box indented-condition-box other-refurbished-condition" data-id="2500">
                            Refurbished by Seller
                        </label>
                        <br>
                    </div>

                    <label> <!-- "Used" checkbox - Category -->
                        <input type="checkbox" id="used-condition" class="condition-box" data-id="">
                        Used&nbsp;&nbsp;
                    </label><div class="fa-solid fa-caret-down condition-accordion-caret inline-block"></div>
                    <br>
                    <div class="panel">
                        <label>
                            <input type="checkbox" class="condition-box indented-condition-box other-used-condition" data-id="2750">
                            Used - Like New
                        </label>
                        <br>                    
                        <label>
                            <input type="checkbox" class="condition-box indented-condition-box other-used-condition" data-id="2990|3000">
                            Used - Excellent
                        </label>
                        <br>                    
                        <label>
                            <input type="checkbox" class="condition-box indented-condition-box other-used-condition" data-id="3010|4000">
                            Used - Very Good
                        </label>
                        <br>                    
                        <label>
                            <input type="checkbox" class="condition-box indented-condition-box other-used-condition" data-id="5000">
                            Used - Good
                        </label>
                        <br>                    
                        <label>
                            <input type="checkbox" class="condition-box indented-condition-box other-used-condition" data-id="6000">
                            Used - Fair
                        </label>
                        <br>
                    </div>

                    <label>
                        <input type="checkbox" id="notworking-condition" class="condition-box" data-id="7000">
                        For parts or not working
                    </label>
                    <br>                
                </div>
            </div>
            <div id="results-container">
                {#if allResults && allResults.length > 0}
                    {#each allResults as result}
                        <div class="result-item">
                            <img class="thumbnail" src={result.thumbnail} alt={result.title} />
                            <div class="content">
                                <h2>
                                    <a class="title-link" href={result.link} target="_blank" rel="noopener noreferrer">
                                        {result.title}
                                    </a>
                                </h2>
                                {#if result.type === 'FIXED_PRICE' && result.price !== 'N/A'}
                                    <p>Price: ${result.price}</p>
                                {:else if result.type === 'AUCTION' && result.bidprice !== 'N/A'}
                                    <p>Current Bid: ${result.bidprice} (<a class="bid-link" href="https://www.ebay.com/bfl/viewbids/{result.itemnumber}?item={result.itemnumber}">{result.bidcount} Bids</a>)</p>
                                        <p>Time Remaining: {result.timeRemaining}</p>
                                {:else if result.bidprice === 'N/A' || result.price === "N/A"}
                                    <p>Price: N/A (Internal Server Error)</p>
                                {:else}
                                    <p>Price: N/A (Internal Server Error)</p>
                                {/if}
                                <p>Condition: {result.condition}</p>
                                <p><em>{result.shipping === 'Free' ? 'Free' : `${result.shipping}`}</em></p>
                                {#if result.type === 'FIXED_PRICE'}
                                    <p>Type: Buy It Now</p>
                                {:else if result.type === 'AUCTION'}
                                    <p>Type: Auction</p>
                                {:else}
                                    <p>Type: {result.type}</p>
                                {/if}

                                <p>Seller: {result.sellerName} &lpar;
                                    <Tooltip
                                        title="Feedback Score" 
                                        text="eBay Feedback Score is another way to check the credibility of a seller, instead of the positive review percentage. <br><br>
                                    Here's how it works: <br>
                                        - If a buyer leaves a positive review, it adds +1 point to the Credibility Score.<br>
                                        - Neutral reviews don't add or remove any points so the score stays the same.<br>
                                        - Negative reviews take away -1 point.<br><br>
                                    However, this is not as accurate of a measurement for smaller sellers, because a seller with a lower credibility score might still be credible, and they just don't have as many reviews/feedback yet." 
                                        fontsize="1rem"
                                        questionmark
                                    >{result.feedbackScore}
                                    </Tooltip>&rpar; ({result.feedbackPercentage}% positive reviews)
                                </p>
                            </div>
                        </div>
                    {/each}
                {:else}
                    <p>No results found</p>
                {/if}
            </div>
        </div>

    <div class="pagination">
        <!-- {#if currentPage > 1} -->
        <button disabled="{currentPageIsOne}" on:click={back} aria-label="Previous Page"><i class="fa-solid fa-arrow-left" aria-hidden="true"></i>&nbsp;&nbsp;Forward</button>
        <!-- {/if} -->
        <button on:click={forward} aria-label="Next Page">Back&nbsp;&nbsp;<i class="fa-solid fa-arrow-right" aria-hidden="true"></i></button>
    </div>
</main>